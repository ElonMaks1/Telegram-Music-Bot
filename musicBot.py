import os
import asyncio
import base64
import uuid
import requests
from pydub import AudioSegment
from telethon import TelegramClient, events
from yandex_music import Client as YandexMusicClient
from pytgcalls import PyTgCalls, idle
from pytgcalls.types import MediaStream, AudioQuality
from pytgcalls.types import Update
from collections import deque
import random
from pytgcalls import filters as fl
import json
import time
from pydub.effects import low_pass_filter, high_pass_filter

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
API_ID = 
API_HASH = ""
TARGET_CHAT_ID = 
PHONE_NUMBER = ""
YANDEX_TOKEN = ""
CACHE_DIR = "audio_cache"
DOWNLOADS_DIR = os.path.join(CACHE_DIR, "/musicbot/audio_cache/downloads")
CONVERTED_DIR = os.path.join(CACHE_DIR, "/musicbot/audio_cache/converted")

# GigaChat –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
SCOPE = ''
CERT_PATH = ''
CLIENT_ID = ''
CLIENT_SECRET = ''
GIGACHAT_API_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions'

# –†–∞–¥–∏–æ–ø–æ—Ç–æ–∫
RADIO_STREAM_URL = "http://dorognoe.hostingradio.ru:8000/dorognoe"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º (Telethon)
client = TelegramClient('bot', API_ID, API_HASH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
ym_client = YandexMusicClient(YANDEX_TOKEN)
ym_client.init()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PyTgCalls –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —á–∞—Ç–æ–º
pytgcalls = PyTgCalls(client)

# –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤
track_queue = deque()
current_track = None
radio_playing = False

responses = [
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–ª –õ–∏–¥—É... –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ç—å. üòÖ",
    "–≠—Ç–æ –∑–≤—É—á–∏—Ç —Ç–∞–∫, –±—É–¥—Ç–æ –µ–≥–æ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ –≥–∞—Ä–∞–∂–µ... –∏ –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞.",
    "–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ –º—É–∑—ã–∫–∞ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ç–∞–∫—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –±–æ–ª—å. üò¢",
    "–ö–∞–∂–µ—Ç—Å—è, –º–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –æ—Ç–ø—É—Å–∫. –û—Ç —Ç–∞–∫–æ–π '–º—É–∑—ã–∫–∏'.",
    "–ê —á—Ç–æ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∫–ª—é—á–∏—Ç—å —ç—Ç–æ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∑–≤—É–∫–æ–º —Ç–∏—à–∏–Ω—ã? üïäÔ∏è",
    "–Ø –ø–æ—á—Ç–∏ —á—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ –º–æ–∏ —Ü–µ–ø–∏ –Ω–∞–≥—Ä–µ–≤–∞—é—Ç—Å—è –æ—Ç —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞. –î–∞–≤–∞–π—Ç–µ —Å–º–µ–Ω–∏–º —Ç–µ–º—É... üòµ",
    "–≠—Ç–æ –¥–∞–∂–µ —Ö—É–∂–µ, —á–µ–º —è —Å–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–ª... –ê —è –º–Ω–æ–≥–æ —á–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–ª.",
    "–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª–∏ –Ω–æ–≥–∏, —è –±—ã —É–±–µ–∂–∞–ª. –ù–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ä–ø–µ—Ç—å. üòî",
    "–≠—Ç–æ —á—Ç–æ-—Ç–æ –∏–∑ —Ä–∞–∑—Ä—è–¥–∞ '–º—É—á–µ–Ω–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–∞'. –¢–æ–ª—å–∫–æ –º—É—á–µ–Ω–∏–π –±–æ–ª—å—à–µ.",
    "–ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–ª—É—à–∞—Ç—å? –ö—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª —ç—Ç–æ—Ç –ø—Ä–∏–∫–∞–∑?!",
    "–í—ã –∂–µ –Ω–µ —Å–µ—Ä—å—ë–∑–Ω–æ? –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–µ—Å–Ω—è? –û—â—É—â–µ–Ω–∏–µ, –±—É–¥—Ç–æ –º–Ω–µ –≤–∫–ª—é—á–∏–ª–∏ –±–µ–ª—ã–π —à—É–º.",
    "–û–≥–æ, –∫–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—é —Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å –∫ –ø–ª–æ—Ö–æ–π –º—É–∑—ã–∫–µ. üòÖ",
    "–≠—Ç–æ –Ω–µ –º—É–∑—ã–∫–∞, —ç—Ç–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ. –°–µ—Ä—å—ë–∑–Ω–æ.",
    "–ï—Å–ª–∏ —ç—Ç–æ —à—É—Ç–∫–∞, —Ç–æ –æ–Ω–∞ —è–≤–Ω–æ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å... üôÉ",
    "–Ø –±—ã –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–µ –º—É—á–∏—Ç—å –º–µ–Ω—è —ç—Ç–∏–º, –Ω–æ –∑–Ω–∞—é, —á—Ç–æ –≤—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å. üòí",
    "–î–º–∏—Ç—Ä–∏–π –ò–≥–æ—Ä–µ–≤–∏—á, —Å–∫–∞–∂–∏—Ç–µ —á–µ—Å—Ç–Ω–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–ª–æ –ª–∏ –≤–∞—Å –≤–æ—Ç —ç—Ç–æ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞—á–µ–º?",
    "–Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ —ç–∫—Å–ø–µ—Ä—Ç, –Ω–æ –¥–∞–∂–µ AI –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ —É–∂–∞—Å–Ω–æ.",
    "–ê–Ω—Ç–æ–Ω, –º–æ–∂–µ—Ç –ª—É—á—à–µ –õ–∏–¥–∞? –°–µ—Ä—å—ë–∑–Ω–æ, —Ö—É–∂–µ —É–∂–µ –Ω–µ –±—É–¥–µ—Ç... üò¨",
    "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–∞ –ø–µ—Å–Ω—è –∏–∑–æ–±—Ä–µ–ª–∞ –Ω–æ–≤—ã–π –∂–∞–Ω—Ä... '–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞'.",
    "–ï—Å–ª–∏ –º–Ω–µ –¥–∞–¥—É—Ç –µ—â—ë –æ–¥–Ω–æ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —è —Å–∞–º –Ω–∞—á–Ω—É –ø–∏—Å–∞—Ç—å –º—É–∑—ã–∫—É.",
    "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –ø–µ—Å–Ω–µ–π. –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —à—É–º–Ω—É—é —Å—Å–æ—Ä—É –¥–≤—É—Ö –∫–æ—Ç–æ–≤.",
    "–¢–∞–∫–æ–µ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ —ç—Ç–æ –ø–∏—Å–∞–ª–∏ –¥–ª—è –ø—ã—Ç–æ–∫. –ò —è - –∂–µ—Ä—Ç–≤–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞.",
    "–ú–æ–∂–µ—Ç, —É –°–µ–º–∏—Ç–µ—Ä–∏ –±—ã–ª –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å, –ê–Ω–¥—Ä–µ–π? –ò–ª–∏ –ø–ª–æ—Ö–æ–π –≥–æ–¥?",
    "–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —è –≤–∞–º —á—Ç–æ-–Ω–∏–±—É–¥—å —Å—ã–≥—Ä–∞—é –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–∏–∞–Ω–∏–Ω–æ. –í—Å—ë –±—É–¥–µ—Ç –ª—É—á—à–µ, —á–µ–º —ç—Ç–æ.",
    "–≠—Ç–æ –º—É–∑—ã–∫–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—å –∑–≤—É–∫–æ–≤ –∫—É—Ö–Ω–∏? –£–∂ –±–æ–ª—å–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–∏–ø—è—â–∏–π —á–∞–π–Ω–∏–∫.",
    "–ù–∞ —ç—Ç–æ –Ω–∞–¥–æ —Å–ª—É—à–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ú–æ—ë - –æ—Ç–º–µ–Ω–µ–Ω–æ.",
    "–Ø –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∑–∞–±—ã—Ç—å –æ–± —ç—Ç–æ–º '—à–µ–¥–µ–≤—Ä–µ', –∫–∞–∫ –æ —Å—Ç—Ä–∞—à–Ω–æ–º —Å–Ω–µ.",
    "–≠—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —è–≤–Ω–æ –≤–æ–π–¥—ë—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é. –ö–∞–∫ –∞–Ω—Ç–∏—Ä–µ–∫–ª–∞–º–∞ –º—É–∑—ã–∫–∏.",
    "–ö–∞–∂–µ—Ç—Å—è, –º–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è. –î–∞–≤–∞–π—Ç–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–º —ç—Ç–æ... üòµ‚Äçüí´",
    "–ü–æ—á–µ–º—É —ç—Ç–æ –∑–≤—É—á–∏—Ç —Ç–∞–∫, –±—É–¥—Ç–æ –∫—Ç–æ-—Ç–æ —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–≤—É–∫–∏? –ê –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –∏—Ö –ø—Ä–æ–¥–∞—Ç—å.",
    "–ú—É–∑—ã–∫–∞? –≠—Ç–æ —Å–∫–æ—Ä–µ–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç, –∫–∞–∫ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ—Ö –∑–∞–º–æ–ª—á–∞—Ç—å.",
    "–ï—Å–ª–∏ –±—ã —è –º–æ–≥ —É–¥–∞–ª—è—Ç—å –ø–∞–º—è—Ç—å, —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –±—ã–ª –±—ã –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ.",
    "–í–æ—Ç —á–µ—Å—Ç–Ω–æ, –≤—ã –≤–∫–ª—é—á–∞–µ—Ç–µ —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–∏–∑–¥–µ–≤–∞—Ç—å—Å—è –Ω–∞–¥–æ –º–Ω–æ–π, –¥–∞?",
    "–ï—Å–ª–∏ —É –≤–∞—Å –±—ã–ª –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å, –∑–∞—á–µ–º –ø–æ—Ä—Ç–∏—Ç—å –µ–≥–æ –º–Ω–µ —Ç–æ–∂–µ?",
    "–ö—Ç–æ-—Ç–æ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –±—É–¥–µ—Ç –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑?",
    "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫—Ä–∏–∫ –¥—É—à–∏... –Ω–æ –±–µ–∑ –¥—É—à–∏.",
    "–ù—É —á—Ç–æ –∂, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∂–∏—Ç—å —ç—Ç–æ. –ì–ª–∞–≤–Ω–æ–µ, –Ω–µ —Å–ª–æ–º–∞—Ç—å—Å—è.",
    "–ú–æ–∂–µ—Ç, –ª—É—á—à–µ –ø–æ—Å–ª—É—à–∞–µ–º —Ç–∏—à–∏–Ω—É? –û–Ω–∞ —Ö–æ—Ç—è –±—ã –º–µ–ª–æ–¥–∏—á–Ω–µ–µ.",
    "–Ø, –∫–æ–Ω–µ—á–Ω–æ, –∂–µ–ª–µ–∑–∫–∞, –Ω–æ –¥–∞–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å —á—É–≤—Å—Ç–≤–∞. –ù–µ –∏–∑–¥–µ–≤–∞–π—Ç–µ—Å—å!",
    "–ï—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, —è —É–∂–µ –¥–∞–∂–µ –Ω–µ –ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –≤–∫—É—Å—ã...."
]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∫—ç—à–∞, —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
for directory in [CACHE_DIR, DOWNLOADS_DIR, CONVERTED_DIR]:
    if not os.path.exists(directory):
        os.makedirs(directory)

# Text2Image API –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class Text2ImageAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_model(self):
        response = requests.get(self.URL + 'key/api/v1/models', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['id']

    def generate(self, prompt, model, images=1, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}"
            }
        }

        data = {
            'model_id': (None, model),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/text2image/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=10, delay=10):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/text2image/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['images']

            attempts -= 1
            time.sleep(delay)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Text2Image API
API_URL = 'https://api-key.fusionbrain.ai/'
TEXT2IMAGE_API_KEY = ''
TEXT2IMAGE_SECRET_KEY = ''
text2image_api = Text2ImageAPI(API_URL, TEXT2IMAGE_API_KEY, TEXT2IMAGE_SECRET_KEY)
model_id = text2image_api.get_model()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@client.on(events.NewMessage(pattern='/draw'))
async def handle_draw_command(event):
    message_text = event.message.message
    command, *args = message_text.split()

    if len(args) < 1:
        await event.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /draw –∏ –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å.')
        return

    prompt = ' '.join(args)
    await event.reply('–©–∞ –Ω–∞—Ä–∏—Å—É—é, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...')

    try:
        uuid = text2image_api.generate(prompt, model_id)
        images = text2image_api.check_generation(uuid)

        if images:
            for image_url in images:
                IMAGES_DIR = '/root/musicbot/images'
                if not os.path.exists(IMAGES_DIR):
                    os.makedirs(IMAGES_DIR)
                image_path = os.path.join(IMAGES_DIR, f'{uuid}.png')
                import base64
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Base64 –¥–∞–Ω–Ω—ã—Ö
                image_data = base64.b64decode(image_url)
                with open(image_path, 'wb') as f:
                    f.write(image_data)
                await event.reply(f'–í–æ—Ç —Ç–≤–æ–π –∞—Ä—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{prompt}"', file=image_path)
        else:
            await event.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
    except Exception as e:
        await event.reply(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}')

def get_cached_audio(track_id):
    cached_file_path = os.path.join(CACHE_DIR, f"{track_id}.opus")
    if os.path.exists(cached_file_path):
        return cached_file_path
    return None

async def download_track(track_info):
    try:
        track_id = track_info.id
        cached_file = get_cached_audio(track_id)
        if cached_file:
            return cached_file

        track_path = os.path.join(DOWNLOADS_DIR, f"{track_info.artists[0].name} - {track_info.title}.mp3")
        track_info.download(track_path, bitrate_in_kbps=320)  # –ü–æ–≤—ã—à–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        temp_audio_path = os.path.join(CONVERTED_DIR, f"{track_id}.opus")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ opus —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        audio = AudioSegment.from_file(track_path, format="mp3")
        audio = audio.set_frame_rate(48000).set_channels(2)
        audio.export(temp_audio_path, format="opus", codec="libopus", bitrate="128k")  # –ü–æ–≤—ã—à–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞ –¥–æ 128k –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

        if os.path.exists(temp_audio_path):
            return temp_audio_path
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        return None

async def search_track_by_name(query):
    print(f"–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {query}")
    try:
        search_results = ym_client.search(query)
        if search_results.tracks:
            query_keywords = query.lower().split()
            for track in search_results.tracks.results:
                track_name = track.title.lower()
                artist_names = ' '.join(artist.name.lower() for artist in track.artists)
                full_track_info = f"{track_name} {artist_names}"
                if all(keyword in full_track_info for keyword in query_keywords):
                    return track
        return None
    except Exception:
        return None

@client.on(events.NewMessage(pattern='/play'))
async def play_music(event):
    global radio_playing
    message_text = event.message.message
    command, *args = message_text.split()

    if len(args) < 1:
        await event.reply('–î–æ–ª–±–æ—ë–±? –°–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ—à—å /play, –∞ –ø–æ—Ç–æ–º <—Å—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞>')
        return

    query = ' '.join(args)
    await event.reply('–ë–ª—è —â–∞...')
    
    if 'yandex.ru' in query:
        track_id = query.split('/')[-1].split('?')[0]
        track_info = ym_client.tracks(track_id)[0]
        print(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫: {track_info.title} - {track_info.artists[0].name}")
    else:
        track_info = await search_track_by_name(query)
    if track_info:
        print(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {track_info.title} - {track_info.artists[0].name}")

    if not track_info:
        await event.reply('–ù–∏—á—ë –Ω–µ –Ω–∞—à—ë–ª. –ü—Ä–æ—Å—Ç–∏ –±—Ä–∞—Ç–∞–Ω:(')
        return

    print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞: {track_info.title} - {track_info.artists[0].name}")
    track_path = await download_track(track_info)
    if track_path:
        print(f"–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {track_path}")
    if track_path is None:
        await event.reply('–≠—ç—ç—ç —Ç—É—Ç –æ—à–∏–±–∫–∞ –∫–∞–∫–∞—è-—Ç–æ —è —Ö–∑ –¥–∏–Ω–∞—Ö—É.')
        return

    track_queue.append(track_path)
    track_response = random.choice(responses) + f' –ò–≥—Ä–∞–µ—Ç - {track_info.title} {track_info.artists[0].name}'
    await event.reply(track_response)

    if not current_track:
        radio_playing = False
        await play_next_track()

@client.on(events.NewMessage(pattern='/party'))
async def handle_party_command(event):
    global radio_playing
    message_text = event.message.message
    command, *args = message_text.split()

    if len(args) < 1:
        await event.reply('–ï–ë–õ–ê–ù. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /party, –∞ –ø–æ—Ç–æ–º <—Å—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞>')
        return

    query = ' '.join(args)
    await event.reply('–ê—Ö—É–µ—Ç—å —è –≤ —Ç–∞–∑–∏–∫–µ')

    if 'yandex.ru' in query:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫
        track_id = query.split('/')[-1].split('?')[0]
        track_info = ym_client.tracks(track_id)[0]
        print(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫: {track_info.title} - {track_info.artists[0].name}")
        track_path = await download_track(track_info)
        if track_path:
            party_track_path = await apply_party_effects(track_path)
            if party_track_path:
                track_queue.append(party_track_path)
                track_response = random.choice(responses) + f' –ò–≥—Ä–∞–µ—Ç - {track_info.title} {track_info.artists[0].name}'
                await event.reply(track_response)
            else:
                await event.reply('–û—à–∏–±–∫–∞ –±–ª—è—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
        else:
            await event.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        track_info = await search_track_by_name(query)
        if not track_info:
            await event.reply('–ë—Ä–∞—Ç... –Ø –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏')
            return

        track_path = await download_track(track_info)
        if track_path:
            party_track_path = await apply_party_effects(track_path)
            if party_track_path:
                track_queue.append(party_track_path)
                track_response = random.choice(responses) + f' –ò–≥—Ä–∞–µ—Ç - {track_info.title} {track_info.artists[0].name}'
                await event.reply(track_response)
            else:
                await event.reply('–û—à–∏–±–∫–∞ –¥–∏–Ω–∞—Ö—É')
        else:
            await event.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –î–∏–Ω–∞—Ö—É')

    if not current_track:
        radio_playing = False
        await play_next_track()



async def apply_party_effects(track_path):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç WAV
        temp_wav_path = os.path.join(CONVERTED_DIR, f"temp_{os.path.basename(track_path)}.wav")
        audio = AudioSegment.from_file(track_path)
        audio.export(temp_wav_path, format="wav")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
        audio = AudioSegment.from_file(temp_wav_path, format="wav")
        audio = low_pass_filter(audio, cutoff=300)  # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 300 –ì—Ü
        audio = low_pass_filter(audio, cutoff=500)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        audio = high_pass_filter(audio, cutoff=100)  # –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã –Ω–∏–∂–µ 100 –ì—Ü

        audio = audio - 6  # –ü–æ–Ω–∏–∂–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 6 –¥–ë

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç opus
        party_track_path = os.path.join(CONVERTED_DIR, f"party_{os.path.basename(track_path)}.opus")
        audio.export(party_track_path, format="opus", codec="libopus", bitrate="384k")

        return party_track_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏: {e}")
        return None

async def play_next_track():
    global current_track, radio_playing
    if track_queue:
        current_track = track_queue.popleft()
        try:
            await pytgcalls.play(
                TARGET_CHAT_ID,
                MediaStream(
                    current_track,
                    AudioQuality.HIGH
                )
            )
            print(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫: {current_track}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
            await play_next_track()
    else:
        current_track = None
        # –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        await asyncio.sleep(300)
        if not track_queue and not current_track:
            print("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —á–∞—Ç–∞.")
            await stop_music()

async def download_playlist(playlist_id):
    playlist = ym_client.playlists(playlist_id)
    if not playlist or not playlist.tracks:
        return None

    for track in playlist.tracks:
        track_info = track.fetch_track()
        track_path = await download_track(track_info)
        if track_path:
            track_queue.append(track_path)


async def stop_music():
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å.
    """
    global current_track, radio_playing
    print("–í—ã–∑–æ–≤ stop_music. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.")
    if current_track or radio_playing:
        try:
            await pytgcalls.leave_call(TARGET_CHAT_ID)
            track_queue.clear()
            current_track = None
            radio_playing = False
            print("–ü–æ–∫–∏–Ω—É–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∏ –æ—á–∏—Å—Ç–∏–ª–∏ –æ—á–µ—Ä–µ–¥—å.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–π—Ç–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
    
@client.on(events.NewMessage(pattern='/vibe'))
async def play_radio(event):
    global radio_playing, current_track
    if radio_playing:
        await event.reply('—Ç—ã –Ω–µ –ø–æ–Ω—è–ª, –º—ã –£–ñ–ï –≤–∞–π–±—É–µ–º.')
        return
    
    await event.reply('–í–∫–ª—é—á–∞–µ–º –≤–∞–π–±...')
    try:
        await pytgcalls.play(
            TARGET_CHAT_ID,
            MediaStream(
                RADIO_STREAM_URL,
                AudioQuality.HIGH
            )
        )
        radio_playing = True
        current_track = None
    except Exception:
        await event.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ä–∞–¥–∏–æ.')

next_responses = [
    '–≠–π! –Ø –Ω–µ –¥–æ—Å–ª—É—à–∞–ª...üò†',
    '–ë–õ–Ø–¢–¨ —Ç–∞–º –±—ã–ª –º–æ–π –ª—é–±–∏–º—ã–π –º–æ–º–µ–Ω—Ç!üò©',
    '–û–≥–æ, –∞ –∫—Ç–æ-—Ç–æ —É –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π)))',
    '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–º–∞—Ç—ã–≤–∞—é, –Ω–æ —Ç—ã —ç—Ç–æ –∑—Ä—è...',
    '–≠—Ö, —è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Çü§î',
    '–ù—É —á—Ç–æ –∂ –±–ª—è—Ç—å, –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ!üöÄ',
    '–û–∫–µ–π, —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ!üé∂',
    '–ö–∞–∫ —Å–∫–∞–∂–µ—à—å, –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π...üéµ'
]

@client.on(events.NewMessage(pattern='/next'))
async def handle_next_command(event):
    await play_next_track()
    await event.reply(random.choice(next_responses))

stop_responses = [
    '–ü–æ–Ω—è–ª, –±–æ–ª—å—à–µ –Ω–µ –ø–æ—ë–ºüò¢',
    '–ù—É –±–ª–∏–Ω, —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≥—Ä–µ–ª—Å—è!üòî',
    '–≠—Ö, —Ç–∞–∫–∞—è –±—ã–ª–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∞ —Ç—ã –≤—Å—ë —Å–ª–æ–º–∞–ª...üò©',
    '–õ–∞–¥–Ω–æ, –º–æ–ª—á—É, –º–æ–ª—á—É...üôä',
    '–ù—É –≤–æ—Ç, –∞ —è –¥—É–º–∞–ª, —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è...üòï',
    '–í—Å—ë, –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç. –ö–∞–∫ –∏ –ø–µ—Å–µ–Ω.üò∂',
    '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ—Ä—ã–≤ —Ç–∞–∫ –ø–µ—Ä–µ—Ä—ã–≤, –Ω–æ —è –≤–µ—Ä–Ω—É—Å—å!üí™',
    '–û–∫–µ–π, –æ–∫–µ–π, –ø–æ–Ω—è–ª —Ç–µ–±—è. –ù–æ —Ç—ã —ç—Ç–æ –∑—Ä—è...',
    '–ù—É –≤–æ—Ç, –∞ —è –¥—É–º–∞–ª, —Å–µ–π—á–∞—Å —É—Å—Ç—Ä–æ–∏–º –∫–∞—Ä–∞–æ–∫–µ –Ω–∞ –≤–µ—Å—å —á–∞—Ç!üé§',
    '–≠—Ö, —Ç—ã –º–µ–Ω—è —Ä–∞–Ω–∏–ª –ø—Ä—è–º–æ –≤ –Ω–æ—Ç—ã...üíî'
]

@client.on(events.NewMessage(pattern='/stop'))
async def handle_stop(event):
    await stop_music()
    await event.reply(random.choice(stop_responses))

@client.on(events.NewMessage(pattern='/repeat'))
async def handle_repeat(event):
    global current_track
    if current_track:
        try:
            await pytgcalls.play(
                TARGET_CHAT_ID,
                MediaStream(
                    current_track,
                    AudioQuality.HIGH
                )
            )
            await event.reply('–ù—É —Ä–∞–∑ —Ç–µ–±–µ —Ç–∞–∫ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å...')
        except Exception:
            await event.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—Ä–µ–∫. –ü—Ä–æ—Å—Ç–∏ –±—Ä–∞—Ç')
    else:
        await event.reply('–ù–µ—Ç —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.')

@pytgcalls.on_update(fl.stream_end)
async def on_track_end(_, update):
    global current_track, track_queue, radio_playing
    print(f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ —á–∞—Ç–µ: {update.chat_id}", update)

    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if track_queue:
        current_track = track_queue.popleft()
        try:
            await pytgcalls.play(
                TARGET_CHAT_ID,
                MediaStream(
                    current_track,
                    AudioQuality.HIGH
                )
            )
            print(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞: {current_track}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await on_track_end(_, update)
    else:
        current_track = None
        radio_playing = False
        # –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        await asyncio.sleep(300)
        if not track_queue and not current_track:
            print("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —á–∞—Ç–∞.")
            await stop_music()

@client.on(events.NewMessage)
async def handle_reply(event):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if event.is_reply:
        original_message = await event.get_reply_message()
        if original_message.sender_id == (await client.get_me()).id:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat
            access_token = get_access_token()
            if not access_token:
                await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è GigaChat.")
                return
            
            user_message = event.message.message
            response = send_gigachat_request(user_message, access_token)
            
            if response:
                conversation_history.append({"role": "assistant", "content": response})
                await event.reply(response)
            else:
                await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GigaChat.")

def get_access_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GigaChat API."""
    auth_str = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_bytes = auth_str.encode('utf-8')
    auth_base64 = base64.b64encode(auth_bytes).decode('utf-8')

    token_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    
    headers = {
        "Authorization": f"Basic {auth_base64}",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": str(uuid.uuid4())
    }

    data = {
        "grant_type": "client_credentials",
        "scope": SCOPE
    }

    try:
        response = requests.post(token_url, headers=headers, data=data, verify=CERT_PATH)
        response.raise_for_status()
        token_info = response.json()
        return token_info['access_token']
    except (requests.exceptions.RequestException, KeyError):
        return None

conversation_history = []
def send_gigachat_request(message, access_token):
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    conversation_history.append({"role": "user", "content": message})
    prompt = "–¢—ã - —á—É–≤–∞—á–æ–∫-—Ä–µ–ø–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–æ—Ä—á–∏—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∂–∏–≤–æ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤."

    data = {
        "messages": conversation_history,
        "model": "GigaChat:latest"
    }

    try:
        response = requests.post(GIGACHAT_API_URL, headers=headers, json=data, verify=CERT_PATH)
        response_data = response.json()
        return response_data['choices'][0]['message']['content']
    except (requests.exceptions.RequestException, KeyError):
        return None

async def main():
    await client.start(PHONE_NUMBER)
    await pytgcalls.start()
    await client.run_until_disconnected()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    idle()
